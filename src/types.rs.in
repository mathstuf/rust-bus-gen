// Copyright (c) 2016, Ben Boeckel
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright notice,
//       this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright notice,
//       this list of conditions and the following disclaimer in the documentation
//       and/or other materials provided with the distribution.
//     * Neither the name of this project nor the names of its contributors
//       may be used to endorse or promote products derived from this software
//       without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
// ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

extern crate serde;
use self::serde::{Deserialize, Deserializer, Error};

use std::borrow::Borrow;

#[derive(PartialEq, Eq)]
/// The direction for method arguments.
pub enum ArgumentDirection {
    /// The argument is an input.
    In,
    /// The argument is a return value.
    Out,
}

impl Deserialize for ArgumentDirection {
    fn deserialize<D: Deserializer>(deserializer: &mut D) -> Result<Self, D::Error> {
        let val = try!(String::deserialize(deserializer));

        match val.borrow() {
            "in" => Ok(ArgumentDirection::In),
            "out" => Ok(ArgumentDirection::Out),
            _ => Err(D::Error::invalid_value("invalid argument direction")),
        }
    }
}

#[derive(Deserialize)]
/// The argument to a method call.
pub struct MethodArgument {
    /// The name of the argument.
    pub name: String,
    #[serde(rename="type")]
    /// The D-Bus type signature of the argument.
    pub type_: String,
    /// Whether the argument in an input or an output to the method.
    pub direction: ArgumentDirection,

    /// The docstring for the method.
    pub docstring: Option<String>,
}

#[derive(Deserialize)]
/// Annotations for various bits.
pub struct Annotation {
    /// The name of the annotation.
    pub name: String,
    /// The value for the annotation.
    pub value: String,

    /// The docstring for the annotation.
    pub docstring: Option<String>,
}

#[derive(Deserialize)]
pub struct Method {
    pub name: String,

    #[serde(rename="arg")]
    pub arguments: Vec<MethodArgument>,
    #[serde(rename="annotation")]
    pub annotations: Vec<Annotation>,

    pub docstring: Option<String>,
}

#[derive(Deserialize)]
pub struct SignalArgument {
    pub name: String,
    #[serde(rename="type")]
    pub type_: String,

    pub docstring: Option<String>,
}

#[derive(Deserialize)]
pub struct Signal {
    pub name: String,

    #[serde(rename="arg")]
    pub arguments: Vec<SignalArgument>,
    #[serde(rename="annotation")]
    pub annotations: Vec<Annotation>,

    pub docstring: Option<String>,
}

#[derive(PartialEq, Eq)]
pub enum PropertyAccess {
    Read,
    ReadWrite,
    Write,
}

impl Deserialize for PropertyAccess {
    fn deserialize<D: Deserializer>(deserializer: &mut D) -> Result<Self, D::Error> {
        let val = try!(String::deserialize(deserializer));

        match val.borrow() {
            "read" => Ok(PropertyAccess::Read),
            "readwrite" => Ok(PropertyAccess::ReadWrite),
            "write" => Ok(PropertyAccess::Write),
            _ => Err(D::Error::invalid_value("invalid property access")),
        }
    }
}

#[derive(Deserialize)]
pub struct Property {
    pub name: String,
    #[serde(rename="type")]
    pub type_: String,
    pub access: PropertyAccess,
    #[serde(rename="annotation")]
    pub annotations: Vec<Annotation>,

    pub docstring: Option<String>,
}

#[derive(Deserialize)]
#[serde(rename="interaface")]
pub struct Interface {
    pub name: String,

    #[serde(rename="method")]
    pub methods: Vec<Method>,
    #[serde(rename="signal")]
    pub signals: Vec<Signal>,
    #[serde(rename="property")]
    pub properties: Vec<Property>,

    pub docstring: Option<String>,
}
